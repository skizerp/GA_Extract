from __future__ import print_function
import pypyodbc
import csv
import sys
import gdata.analytics.client
import gdata.sample_util
import sqlite3 as db



def main():
  """Main function for the sample."""

  demo = DataFeedDemo()
  demo.StoreData()
  #demo.PrintDataSources()
  #demo.PrintFeedAggregates()
  #demo.PrintSegmentInfo()
  #demo.PrintOneEntry()
  #demo.PrintFeedTable()


class DataFeedDemo(object):
  """Gets data from the Data Feed.

  Attributes:
    data_feed: Google Analytics AccountList returned form the API.
  """

  def __init__(self):
    """Inits DataFeedDemo."""

    SOURCE_APP_NAME = 'GA_data_extract'
    my_client = gdata.analytics.client.AnalyticsClient(source=SOURCE_APP_NAME)

    try:
      gdata.sample_util.authorize_client(
          my_client,
          service=my_client.auth_service,
          source=SOURCE_APP_NAME,
          scopes=['https://www.google.com/analytics/feeds/'])
    except gdata.client.BadAuthentication:
      exit('Invalid user credentials given.')
    except gdata.client.Error:
      exit('Login Error')

  	
  	#uncomment to prompt user for table id instead of relying on table_ids list:
    #table_id = gdata.sample_util.get_param(
        #name='table_id',
        #prompt='Please enter your Google Analytics Table id (format ga:xxxx)')

    #uncomment to prompt user to enter start date
    #start_date = gdata.sample_util.get_param(
        #name='start_date',
        #prompt='Please enter your Start Date (format YYYY-MM-DD)')

    #uncomment to prompt user to enter end date
    #end_date = gdata.sample_util.get_param(
        #name='end_date',
        #prompt='Please enter your End Date (format YYYY-MM-DD)')


    # DataFeedQuery simplifies constructing API queries and uri encodes params.
    data_query = gdata.analytics.client.DataFeedQuery({
        'ids': 'ga:15018147',
        #'start-date': start_date,
        #'end-date': end_date,
        'start-date': '2014-04-01',
        'end-date': '2014-04-01',
        'dimensions': 'ga:date, ga:source, ga:medium',
        'metrics': 'ga:transactions, ga:transactionrevenue',
        #'dimensions': 'ga:source,ga:medium,ga:campaign',
        #'metrics': 'ga:impressions,ga:adclicks,ga:adcost,ga:transactions,ga:transactionrevenue,ga:visits,ga:newvisits,ga:bounces,ga:pageviews',
        'sort': 'ga:date',
        'filters': 'ga:medium==cpc',
        'max-results': '50000',
        'samplingLevel': 'HIGHER_PRECISION',
        'prettyPrint': True})

    self.feed = my_client.GetDataFeed(data_query)
    # This takes the results of the query and stores them in a file
    # log = open("c:\SQLite\sample.csv", "w")
    # print(self.feed, file = log)

  def StoreData(self):
    log = open("c:\SQLite\sample.csv", "w")

    aggregates = self.feed.aggregates
    data_source = self.feed.data_source[0]

    print('Start Date, ' + self.feed.start_date.text, file = log)
    print('End Date, ' + self.feed.end_date.text, file = log)
    print('Has sampled data, ' + str(self.feed.HasSampledData()))

    for met in aggregates.metric:
      print('Metric Name, ' + met.name, file = log)
      print('Metric Value, ' + met.value, file = log)
      print('Metric Type, ' + met.type, file = log)





if __name__ == '__main__':
	main()
